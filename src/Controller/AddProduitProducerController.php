<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use App\Entity\Product;
use App\Form\ProduitFormType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Filesystem\Filesystem;


class AddProduitProducerController extends AbstractController
{

     /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * @Route("/add/produit/producer", name="add_produit_producer")
     */
    public function index(UserInterface $userProfile,Filesystem $filesystem,Request $request): Response
    {
        $newProduct = new Product();
        $form = $this->createForm(ProduitFormType::class, $newProduct);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
        
            $picture = $form['image']->getData();
            
            $path = $this->getParameter('picture_directory');

              if (!$path.$userProfile->getId()) {
                $filesystem->mkdir($path.$userProfile->getId(),0700);
            }
             $fileName = $this->generateUniqueFileName().'.'.$picture->guessExtension();
          
             
                try {
                      $picture->move($path.$userProfile->getId(), 
                    $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }
           
            $entityManager = $this->getDoctrine()->getManager();
            $newProduct->setUser($userProfile);
            $newProduct->setImage($fileName);
            $newProduct->setCategory($newProduct->getCategory());
            $newProduct->setProductRef($this->generateUniqueFileName());

            $entityManager->persist($newProduct);
               $entityManager->flush();
               return $this->redirectToRoute('profil'); 
        }
    
        return $this->render('add_produit_producer/index.html.twig', [
            'controller_name' => 'AddProduitProducerController',
            'form' => $form->createView()
        ]);
    }
    
     /**
     * Supprimer produit
     * @Route("profil/delete/produit/{id}", name="delete_produit")
     * @param $id
     */
     public function deleteFolderRegistration($id, UserInterface $userProfile,Filesystem $fileSystem)
    {   
         $fileName =  $this->getDoctrine()->getRepository(Product::class)->find($id);
         //Supprimer le fichier dans le dossier qui a l'id du user connecté
        $path = $this->getParameter('picture_directory');
        $fs = new Filesystem(); 
        $fs->remove($path.$userProfile->getId().'/'.$fileName->getImage()); 
        
        //Supprimer les nom des fichiés dans la BDD
        $productDataBase = $this->getDoctrine()->getRepository(Product::class)->find($id);
        $em = $this->getDoctrine()->getManager();
        $em->remove($productDataBase);
        $em->flush();
        return $this->redirectToRoute('profil'); 
    }

}
